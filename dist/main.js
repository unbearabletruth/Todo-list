(()=>{"use strict";var n={264:(n,e,t)=>{t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"* {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n}\n\n.renderedCard {\n    display: flex;\n    flex-direction: column;\n}\n\n#renderedTitle,\n#renderedDescription,\n#renderedDueDate,\n#renderedPriority {\n    gap: 5px;\n}\n\n.toDocard #renderedTitle {\n    display: flex;\n    flex: 1;\n    font-weight: bold;\n    font-size: 20px;\n}\n\n#renderedDescription {\n    display: flex;\n    flex-direction: column;\n    flex: 3;\n}\n\n#renderedDueDate {\n    display: flex;\n    flex-direction: column;\n    flex: 2;\n}\n\n#renderedPriority {\n    display: flex;\n    flex-direction: column;\n    flex: 2;\n}\n\n.toDocard .renderedCardHead {\n    font-size: 14px;\n    color: #525252;\n}\n\n.toDocard .renderedCardText {\n    overflow-wrap: break-word;\n    font-size: 18px;\n}\n\n\n\n.bigToDoCard #renderedTitle {\n    display: flex;\n    flex: 1;\n    font-weight: bold;\n    font-size: 30px;\n}\n\n.bigToDoCard .renderedCardHead {\n    font-size: 20px;\n    color: #525252\n}\n\n.bigToDoCard .renderedCardText {\n    overflow-wrap: break-word;\n    font-size: 26px;\n}","",{version:3,sources:["webpack://./public/styles/renderCard.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;;;;IAII,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,OAAO;IACP,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,OAAO;AACX;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,OAAO;AACX;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,OAAO;AACX;;AAEA;IACI,eAAe;IACf,cAAc;AAClB;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB;;;;AAIA;IACI,aAAa;IACb,OAAO;IACP,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf;AACJ;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB",sourcesContent:["* {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n}\n\n.renderedCard {\n    display: flex;\n    flex-direction: column;\n}\n\n#renderedTitle,\n#renderedDescription,\n#renderedDueDate,\n#renderedPriority {\n    gap: 5px;\n}\n\n.toDocard #renderedTitle {\n    display: flex;\n    flex: 1;\n    font-weight: bold;\n    font-size: 20px;\n}\n\n#renderedDescription {\n    display: flex;\n    flex-direction: column;\n    flex: 3;\n}\n\n#renderedDueDate {\n    display: flex;\n    flex-direction: column;\n    flex: 2;\n}\n\n#renderedPriority {\n    display: flex;\n    flex-direction: column;\n    flex: 2;\n}\n\n.toDocard .renderedCardHead {\n    font-size: 14px;\n    color: #525252;\n}\n\n.toDocard .renderedCardText {\n    overflow-wrap: break-word;\n    font-size: 18px;\n}\n\n\n\n.bigToDoCard #renderedTitle {\n    display: flex;\n    flex: 1;\n    font-weight: bold;\n    font-size: 30px;\n}\n\n.bigToDoCard .renderedCardHead {\n    font-size: 20px;\n    color: #525252\n}\n\n.bigToDoCard .renderedCardText {\n    overflow-wrap: break-word;\n    font-size: 26px;\n}"],sourceRoot:""}]);const d=i},694:(n,e,t)=>{t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,'* {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n    font-family: \'Roboto\', sans-serif;\n}\n\n.wrapper {\n    display: grid;\n    grid-template: 1fr 20fr / 1fr 5fr;\n    \n    border-color: black;\n    height: 100vh;\n}\n\n.header {\n    display: flex;\n    align-items: center;\n    padding: 15px;\n    grid-row: 1;\n    grid-column: 1 / 3;\n    background-color: #818cf8;\n    color: #404040;\n    font-size: 26px;\n    font-weight: bold;\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n    z-index: 1;\n}\n\ndiv.sidebar {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    grid-row: 2 / 3;\n    grid-column: 1;\n    background-color: white;\n    border-bottom: 1px solid #e5e5e5;\n    border-left: 1px solid #e5e5e5;\n    border-right: 1px solid #e5e5e5;\n}\n\n.projects {\n    padding-top: 50px;\n}\n\n\nbutton.addProject {\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    width: 120px;\n    height: 30px;\n    background-color: #38bdf8;\n    border-radius: 10px;\n    border: 0px;\n    font-weight: bold;\n    color: white;\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n}\n\ndiv.cardformbutton {\n    display: flex;\n    justify-content: space-evenly;\n}\n\nbutton.cardformbutton {\n    width: 70px;\n    height: 30px;\n    background-color: #8b5cf6;\n    border-radius: 10px;\n    border: 0px;\n    font-weight: bold;\n    color: white;\n}\n\nform#projectForm {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin: 10px 0px;\n    padding: 0px 10px;\n    align-items: center;\n}\n\nbutton.cardformbutton:hover {\n    background-color: #7c3aed;\n    cursor: pointer;\n}\n\n.content {\n    position: relative;\n}\n\nbutton.addCard {\n    position: absolute;\n    display: flex;\n    gap:10px;\n    justify-content: center;\n    align-items: center;\n    top: 20px;\n    right: 20px;\n    width: 170px;\n    height: 60px;\n    background-color: #38bdf8;\n    border-radius: 10px;\n    border: 0px;\n    font-size: 22px;\n    font-weight: bold;\n    color: white;\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n}\n\n#projectFormButtons {\n    display: flex;\n    gap: 20px;\n}\n\nbutton.projectFormButtons {\n    width: 60px;\n    height: 25px;\n    background-color: #38bdf8;\n    border-radius: 10px;\n    border: 0px;\n    font-weight: bold;\n    color: white;\n}\n\nbutton.addCard:hover,\nbutton.addProject:hover,\nbutton#projectsubmitbutton:hover,\nbutton.projectFormButtons:hover {\n    background-color: #0ea5e9;\n    cursor: pointer;\n}\n\n.todos {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 250px);\n    gap: 100px;\n    padding: 100px;\n}\n\n.toDocard {\n    display: flex;\n    flex-direction: column;\n    background-color: #ddd6fe;\n    height: 300px;\n    width: 250px;\n    padding: 25px;\n    border-radius: 10px;\n    box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\n    justify-content: space-between;\n    color: #404040;\n    transition: 0.2s;\n    transition-timing-function: ease-in;\n}\n\n.bigToDoCard {\n    justify-self: center;\n    font-size: 1.5em;\n    width: 400px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: #ddd6fe;\n    padding: 25px;\n    border-radius: 10px;\n    justify-content: space-between;\n    color: #404040;\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n    transition: 0.2s;\n    transition-timing-function: ease-in;\n}\n\nform#cardForm {\n    display: flex;\n    flex-direction: column;\n    background-color: #ddd6fe;\n    height: 300px;\n    width: 250px;\n    padding: 15px;\n    border-radius: 10px;\n    box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\n    justify-content: space-evenly;\n}\n\ninput[type="text"],\ninput[type="datetime-local"] {\n    appearance: none;\n    background-color: #f5f3ff;\n    border: 0px;\n    height: 27px;\n    border-radius: 10px;\n    padding: 0px 7px;\n    color: #404040;\n    font-size: 16px;\n}\n\ninput#projectinput {\n    width: 90%;\n    height: 23px;\n    background-color: white;\n    border: 1px solid #d4d4d4;\n}\n\ninput#projectinput:focus {\n    border: 1px solid #0ea5e9;\n}\n\nselect {\n    background-color: #f5f3ff;\n    border: 0px;\n    height: 25px;\n    border-radius: 10px;\n    padding: 0px 5px;\n    color: #404040;\n    font-size: 16px;\n\n}\n\nselect:focus {\n    outline: none;\n}\n\ntextarea {\n    padding: 5px;\n    appearance: none;\n    height: 100px;\n    border: 0px;\n    border-radius: 10px;\n    background-color: #f5f3ff;\n    color: #404040;\n    font-size: 16px;\n}\n\ninput:focus {\n    outline: none;\n    background-color: white;\n}\n\ntextarea:focus {\n    outline: none;\n    background-color: white;\n}\n\ndiv.project {\n    background-color: #fafafa;\n    padding: 15px 0px;\n    gap: 15px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #404040;\n    font-size: 16px;\n    font-weight: bold;\n    border-bottom: 1px solid #e5e5e5;\n}\n\ndiv.projectCounter {\n    color: white;\n    background-color: #a3a3a3;\n    font-size: 12px;\n    padding: 2px 8px;\n    border-radius: 7px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\ndiv.project:hover {\n    background-color: #e5e5e5 !important;\n    cursor: pointer;\n}\n\n::placeholder { \n    color: #404040;\n    opacity: 1; \n  }\n\np.currentproject {\n    position: absolute;\n    left: 20px;\n    top: 20px;\n    color: #737373;\n    font-size: 22px;\n    font-weight: bold;\n}\n\nimg.cardimg {\n    width: 15px;\n    height: auto;\n}\n\nimg.cardimg:hover {\n    transform: scale(1.3);\n    cursor: pointer;\n}\n\nimg.addCard {\n    width: 30px;\n    height: auto;\n    filter: invert(100%) sepia(0%) saturate(7500%) hue-rotate(279deg) brightness(106%) contrast(106%);\n}\n\ndiv#cardIcons {\n    display: flex;\n    justify-content: end;\n    gap: 25px;\n}\n\ninput:invalid,\ntextarea:invalid {\n    border: 2px solid #ef4444;\n}\n\nspan.errorMessage {\n    font-size: 12px;\n    color: #ef4444;\n}',"",{version:3,sources:["webpack://./public/styles/style.css"],names:[],mappings:"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",sourcesContent:['* {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n    font-family: \'Roboto\', sans-serif;\n}\n\n.wrapper {\n    display: grid;\n    grid-template: 1fr 20fr / 1fr 5fr;\n    \n    border-color: black;\n    height: 100vh;\n}\n\n.header {\n    display: flex;\n    align-items: center;\n    padding: 15px;\n    grid-row: 1;\n    grid-column: 1 / 3;\n    background-color: #818cf8;\n    color: #404040;\n    font-size: 26px;\n    font-weight: bold;\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n    z-index: 1;\n}\n\ndiv.sidebar {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    grid-row: 2 / 3;\n    grid-column: 1;\n    background-color: white;\n    border-bottom: 1px solid #e5e5e5;\n    border-left: 1px solid #e5e5e5;\n    border-right: 1px solid #e5e5e5;\n}\n\n.projects {\n    padding-top: 50px;\n}\n\n\nbutton.addProject {\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    width: 120px;\n    height: 30px;\n    background-color: #38bdf8;\n    border-radius: 10px;\n    border: 0px;\n    font-weight: bold;\n    color: white;\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n}\n\ndiv.cardformbutton {\n    display: flex;\n    justify-content: space-evenly;\n}\n\nbutton.cardformbutton {\n    width: 70px;\n    height: 30px;\n    background-color: #8b5cf6;\n    border-radius: 10px;\n    border: 0px;\n    font-weight: bold;\n    color: white;\n}\n\nform#projectForm {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin: 10px 0px;\n    padding: 0px 10px;\n    align-items: center;\n}\n\nbutton.cardformbutton:hover {\n    background-color: #7c3aed;\n    cursor: pointer;\n}\n\n.content {\n    position: relative;\n}\n\nbutton.addCard {\n    position: absolute;\n    display: flex;\n    gap:10px;\n    justify-content: center;\n    align-items: center;\n    top: 20px;\n    right: 20px;\n    width: 170px;\n    height: 60px;\n    background-color: #38bdf8;\n    border-radius: 10px;\n    border: 0px;\n    font-size: 22px;\n    font-weight: bold;\n    color: white;\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n}\n\n#projectFormButtons {\n    display: flex;\n    gap: 20px;\n}\n\nbutton.projectFormButtons {\n    width: 60px;\n    height: 25px;\n    background-color: #38bdf8;\n    border-radius: 10px;\n    border: 0px;\n    font-weight: bold;\n    color: white;\n}\n\nbutton.addCard:hover,\nbutton.addProject:hover,\nbutton#projectsubmitbutton:hover,\nbutton.projectFormButtons:hover {\n    background-color: #0ea5e9;\n    cursor: pointer;\n}\n\n.todos {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 250px);\n    gap: 100px;\n    padding: 100px;\n}\n\n.toDocard {\n    display: flex;\n    flex-direction: column;\n    background-color: #ddd6fe;\n    height: 300px;\n    width: 250px;\n    padding: 25px;\n    border-radius: 10px;\n    box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\n    justify-content: space-between;\n    color: #404040;\n    transition: 0.2s;\n    transition-timing-function: ease-in;\n}\n\n.bigToDoCard {\n    justify-self: center;\n    font-size: 1.5em;\n    width: 400px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: #ddd6fe;\n    padding: 25px;\n    border-radius: 10px;\n    justify-content: space-between;\n    color: #404040;\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n    transition: 0.2s;\n    transition-timing-function: ease-in;\n}\n\nform#cardForm {\n    display: flex;\n    flex-direction: column;\n    background-color: #ddd6fe;\n    height: 300px;\n    width: 250px;\n    padding: 15px;\n    border-radius: 10px;\n    box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\n    justify-content: space-evenly;\n}\n\ninput[type="text"],\ninput[type="datetime-local"] {\n    appearance: none;\n    background-color: #f5f3ff;\n    border: 0px;\n    height: 27px;\n    border-radius: 10px;\n    padding: 0px 7px;\n    color: #404040;\n    font-size: 16px;\n}\n\ninput#projectinput {\n    width: 90%;\n    height: 23px;\n    background-color: white;\n    border: 1px solid #d4d4d4;\n}\n\ninput#projectinput:focus {\n    border: 1px solid #0ea5e9;\n}\n\nselect {\n    background-color: #f5f3ff;\n    border: 0px;\n    height: 25px;\n    border-radius: 10px;\n    padding: 0px 5px;\n    color: #404040;\n    font-size: 16px;\n\n}\n\nselect:focus {\n    outline: none;\n}\n\ntextarea {\n    padding: 5px;\n    appearance: none;\n    height: 100px;\n    border: 0px;\n    border-radius: 10px;\n    background-color: #f5f3ff;\n    color: #404040;\n    font-size: 16px;\n}\n\ninput:focus {\n    outline: none;\n    background-color: white;\n}\n\ntextarea:focus {\n    outline: none;\n    background-color: white;\n}\n\ndiv.project {\n    background-color: #fafafa;\n    padding: 15px 0px;\n    gap: 15px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #404040;\n    font-size: 16px;\n    font-weight: bold;\n    border-bottom: 1px solid #e5e5e5;\n}\n\ndiv.projectCounter {\n    color: white;\n    background-color: #a3a3a3;\n    font-size: 12px;\n    padding: 2px 8px;\n    border-radius: 7px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\ndiv.project:hover {\n    background-color: #e5e5e5 !important;\n    cursor: pointer;\n}\n\n::placeholder { \n    color: #404040;\n    opacity: 1; \n  }\n\np.currentproject {\n    position: absolute;\n    left: 20px;\n    top: 20px;\n    color: #737373;\n    font-size: 22px;\n    font-weight: bold;\n}\n\nimg.cardimg {\n    width: 15px;\n    height: auto;\n}\n\nimg.cardimg:hover {\n    transform: scale(1.3);\n    cursor: pointer;\n}\n\nimg.addCard {\n    width: 30px;\n    height: auto;\n    filter: invert(100%) sepia(0%) saturate(7500%) hue-rotate(279deg) brightness(106%) contrast(106%);\n}\n\ndiv#cardIcons {\n    display: flex;\n    justify-content: end;\n    gap: 25px;\n}\n\ninput:invalid,\ntextarea:invalid {\n    border: 2px solid #ef4444;\n}\n\nspan.errorMessage {\n    font-size: 12px;\n    color: #ef4444;\n}'],sourceRoot:""}]);const d=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var s=0;s<n.length;s++){var u=[].concat(n[s]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],d=0;d<n.length;d++){var c=n[d],s=r.base?c[0]+r.base:c[0],u=a[s]||0,l="".concat(s," ").concat(u);a[s]=u+1;var A=t(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var f=o(p,r);r.byIndex=d,e.splice(d,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var d=t(a[i]);e[d].references--}for(var c=r(n,o),s=0;s<a.length;s++){var u=t(a[s]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0;var r={};(()=>{t.d(r,{k:()=>Ln});var n=t(379),e=t.n(n),o=t(795),a=t.n(o),i=t(569),d=t.n(i),c=t(565),s=t.n(c),u=t(216),l=t.n(u),A=t(589),p=t.n(A),f=t(694),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=d().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),e()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;var h=t(264),g={};function C(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function b(n){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},b(n)}function x(n){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},x(n)}function v(n){C(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===x(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function w(n){C(1,arguments);var e=v(n),t=e.getUTCDay(),r=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function I(n){C(1,arguments);var e=v(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=w(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=w(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}g.styleTagTransform=p(),g.setAttributes=s(),g.insert=d().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=l(),e()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var B={};function D(){return B}function T(n,e){var t,r,o,a,i,d,c,s;C(1,arguments);var u=D(),l=y(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(c=u.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==t?t:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=v(n),p=A.getUTCDay(),f=(p<l?7:0)+p-l;return A.setUTCDate(A.getUTCDate()-f),A.setUTCHours(0,0,0,0),A}function E(n,e){var t,r,o,a,i,d,c,s;C(1,arguments);var u=v(n),l=u.getUTCFullYear(),A=D(),p=y(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(c=A.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==t?t:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(l+1,0,p),f.setUTCHours(0,0,0,0);var m=T(f,e),h=new Date(0);h.setUTCFullYear(l,0,p),h.setUTCHours(0,0,0,0);var g=T(h,e);return u.getTime()>=m.getTime()?l+1:u.getTime()>=g.getTime()?l:l-1}function k(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const S=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return k("yy"===e?r%100:r,e.length)},j=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):k(t+1,2)},M=function(n,e){return k(n.getUTCDate(),e.length)},Y=function(n,e){return k(n.getUTCHours()%12||12,e.length)},P=function(n,e){return k(n.getUTCHours(),e.length)},U=function(n,e){return k(n.getUTCMinutes(),e.length)},N=function(n,e){return k(n.getUTCSeconds(),e.length)},W=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return k(Math.floor(r*Math.pow(10,t-3)),e.length)};var z={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return S(n,e)},Y:function(n,e,t,r){var o=E(n,r),a=o>0?o:1-o;return"YY"===e?k(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):k(a,e.length)},R:function(n,e){return k(I(n),e.length)},u:function(n,e){return k(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return k(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return k(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return j(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return k(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){C(1,arguments);var t=v(n),r=T(t,e).getTime()-function(n,e){var t,r,o,a,i,d,c,s;C(1,arguments);var u=D(),l=y(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(c=u.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==t?t:1),A=E(n,e),p=new Date(0);return p.setUTCFullYear(A,0,l),p.setUTCHours(0,0,0,0),T(p,e)}(t,e).getTime();return Math.round(r/6048e5)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):k(o,e.length)},I:function(n,e,t){var r=function(n){C(1,arguments);var e=v(n),t=w(e).getTime()-function(n){C(1,arguments);var e=I(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),w(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):k(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):M(n,e)},D:function(n,e,t){var r=function(n){C(1,arguments);var e=v(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=t-e.getTime();return Math.floor(r/864e5)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):k(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return k(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return k(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return k(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return Y(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):P(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):k(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):k(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):U(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):N(n,e)},S:function(n,e){return W(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return O(o);case"XXXX":case"XX":return F(o);default:return F(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return O(o);case"xxxx":case"xx":return F(o);default:return F(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+L(o,":");default:return"GMT"+F(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+L(o,":");default:return"GMT"+F(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return k(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return k((r._originalDate||n).getTime(),e.length)}};function L(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=e||"";return t+String(o)+i+k(a,2)}function O(n,e){return n%60==0?(n>0?"-":"+")+k(Math.abs(n)/60,2):F(n,e)}function F(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+k(Math.floor(o/60),2)+t+k(o%60,2)}const q=z;var H=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Z=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const X={p:Z,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return H(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",H(o,e)).replace("{{time}}",Z(a,e))}};var R=["D","DD"],J=["YY","YYYY"];function Q(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var G={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function $(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const V={date:$({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:$({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:$({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var _={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function K(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,d=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[d]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const nn={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:K({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:K({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:K({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:K({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:K({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function en(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,d=a[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],s=Array.isArray(c)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(d))return t}(c):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(d))return t}(c);return i=n.valueCallback?n.valueCallback(s):s,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(d.length)}}}var tn,rn={ordinalNumber:(tn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(tn.matchPattern);if(!t)return null;var r=t[0],o=n.match(tn.parsePattern);if(!o)return null;var a=tn.valueCallback?tn.valueCallback(o[0]):o[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(r.length)}}),era:en({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:en({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:en({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:en({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:en({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const on={code:"en-US",formatDistance:function(n,e,t){var r,o=G[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:V,formatRelative:function(n,e,t,r){return _[n]},localize:nn,match:rn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var an=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,dn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,cn=/^'([^]*?)'?$/,sn=/''/g,un=/[a-zA-Z]/;function ln(n,e,t){var r,o,a,i,d,c,s,u,l,A,p,f,m,h,g,x,w,I;C(2,arguments);var B=String(e),T=D(),E=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:T.locale)&&void 0!==r?r:on,k=y(null!==(a=null!==(i=null!==(d=null!==(c=null==t?void 0:t.firstWeekContainsDate)&&void 0!==c?c:null==t||null===(s=t.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==d?d:T.firstWeekContainsDate)&&void 0!==i?i:null===(l=T.locale)||void 0===l||null===(A=l.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=y(null!==(p=null!==(f=null!==(m=null!==(h=null==t?void 0:t.weekStartsOn)&&void 0!==h?h:null==t||null===(g=t.locale)||void 0===g||null===(x=g.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==m?m:T.weekStartsOn)&&void 0!==f?f:null===(w=T.locale)||void 0===w||null===(I=w.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==p?p:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!E.localize)throw new RangeError("locale must contain localize property");if(!E.formatLong)throw new RangeError("locale must contain formatLong property");var j=v(n);if(!function(n){if(C(1,arguments),!function(n){return C(1,arguments),n instanceof Date||"object"===b(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=v(n);return!isNaN(Number(e))}(j))throw new RangeError("Invalid time value");var M=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(j),Y=function(n,e){return C(2,arguments),function(n,e){C(2,arguments);var t=v(n).getTime(),r=y(e);return new Date(t+r)}(n,-y(e))}(j,M),P={firstWeekContainsDate:k,weekStartsOn:S,locale:E,_originalDate:j};return B.match(dn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,X[e])(n,E.formatLong):n})).join("").match(an).map((function(r){if("''"===r)return"'";var o,a,i=r[0];if("'"===i)return(a=(o=r).match(cn))?a[1].replace(sn,"'"):o;var d,c=q[i];if(c)return null!=t&&t.useAdditionalWeekYearTokens||(d=r,-1===J.indexOf(d))||Q(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==R.indexOf(n)}(r)||Q(r,e,String(n)),c(Y,r,E.localize,P);if(i.match(un))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}Math.pow(10,8);var An=6e4,pn=36e5;var fn={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},mn=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,hn=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,gn=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Cn(n){return n?parseInt(n):1}function bn(n){return n&&parseFloat(n.replace(",","."))||0}var xn=[31,null,31,30,31,30,31,31,30,31,30,31];function vn(n){return n%400==0||n%4==0&&n%100!=0}const yn=t.p+"18d967047ce8e906d570.svg",wn=t.p+"dfe98989709adc1e7221.svg",In=document.querySelector(".projects");function Bn(n){const e=document.querySelector(".currentproject");null!=e&&e.remove();const t=document.createElement("p");return t.classList.add("currentproject"),t.textContent=n.name,document.querySelector(".content").appendChild(t),t}function Dn(n){const e=document.getElementById(`${n.index}`);1===n.getLength()?e.textContent=`${n.getLength()} task`:e.textContent=`${n.getLength()} tasks`}function Tn(n){const e=document.createElement("div");e.classList.add("project"),e.textContent=n.name;const t=function(n){const e=document.createElement("div");return e.id=n.index,e.classList.add("projectCounter"),e}(n);e.appendChild(t),In.appendChild(e);const r=function(n,e){const t=document.createElement("img");return t.classList.add("cardimg"),t.src=yn,t.addEventListener("click",(()=>{!function(n){Wn.remove(n),function(n){const e=JSON.parse(localStorage.getItem("storedProjects"));for(let t=0;t<e.length;t++)e[t].index===n.index&&e.splice(t,1);localStorage.setItem("storedProjects",JSON.stringify(e))}(n)}(n),e.remove()})),t}(n,e);Dn(n),e.appendChild(r),Wn.add(n),e.addEventListener("click",(()=>{const t=document.querySelector(".todos");for(;t.firstChild;)t.removeChild(t.firstChild);var r;Bn(n),r=e,document.querySelectorAll("div.project").forEach((n=>n.style.backgroundColor="#fafafa")),r.style.backgroundColor="#38bdf8",n.renderAllCards(),Ln=n,console.log("clicked",n)}))}function En(n,e){const t=document.querySelector(".errorMessage");return n.value.length<3?(n.setCustomValidity(" "),n.reportValidity(),t.textContent="At least 3 characters!",!1):n.value.length>20?(console.log("hey"),n.setCustomValidity(" "),n.reportValidity(),t.textContent="Title is 20 characters max!",!1):(n.setCustomValidity(""),n.reportValidity(),t.textContent="",!0)}function kn(){const n=document.createElement("input");return n.id="titleInput",n.type="text",n.placeholder="Title",n.autocomplete="off",n}function Sn(){const n=document.createElement("textarea");return n.placeholder="Description",n.id="descriptioninput",n}function jn(){const n=document.createElement("input");return n.type="datetime-local",n.placeholder="Due date",n.pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}",n}function Mn(){const n=document.createElement("select"),e=document.createElement("option");return e.value="",e.text="Choose priority",n.appendChild(e),["Low","Medium","High"].forEach((e=>{const t=document.createElement("option");t.value=e,t.text=e,n.appendChild(t)})),n}document.querySelector("button.addCard").addEventListener("click",(()=>{const n=kn(),e=Sn(),t=jn(),r=Mn(),o=function(n,e,t,r){const o=document.createElement("form");return o.id="cardForm",o.addEventListener("submit",(a=>{if(!0===En(n)){o.remove();const i="id"+(new Date).getTime(),d=Ln.index,c=new Un(n.value,e.value,t.value,r.value,i,d);console.log(Ln),Ln.add(c),function(){let n=[];for(let e of Wn.getAllProjects())n.push(e.getAllCards());localStorage.setItem("storedCards",JSON.stringify(n))}(),Dn(Ln),Ln.showAllCards(),Pn(c),a.preventDefault()}else a.preventDefault()})),o}(n,e,t,r),a=document.createElement("div");a.classList.add("cardformbutton");const i=function(){const n=document.createElement("button");return n.classList.add("cardformbutton"),n.innerText="Add",n}(),d=function(n){const e=document.createElement("button");return e.classList.add("cardformbutton"),e.innerText="Cancel",e.addEventListener("click",(e=>{e.preventDefault(),n.remove()})),e}(o);o.appendChild(n),function(n,e){(function(n){const e=document.createElement("span");e.classList.add("errorMessage"),n.appendChild(e)})(e),function(n,e){n.addEventListener("input",(()=>{En(n)}))}(n)}(n,o),o.appendChild(e),o.appendChild(t),o.appendChild(r),a.appendChild(i),a.appendChild(d),o.appendChild(a),Yn.appendChild(o)}));const Yn=document.querySelector(".todos");function Pn(n,e){const t=document.createElement("div");t.id=n.uniqueID,t.classList.add("toDocard");const r=function(n){const e=document.createElement("p");return e.id="renderedTitle",e.textContent=`${n.title.charAt(0).toUpperCase()+n.title.slice(1)}`,e}(n),o=function(n){const e=document.createElement("div");e.id="renderedDescription";const t=document.createElement("p");t.classList.add("renderedCardHead"),t.textContent="Description";const r=document.createElement("p");return r.classList.add("renderedCardText"),r.textContent=`${n.description}`,e.appendChild(t),e.appendChild(r),e}(n),a=function(n){const e=document.createElement("div");e.id="renderedDueDate";const t=document.createElement("p");t.classList.add("renderedCardHead"),t.textContent="Due date";const r=document.createElement("p");if(r.classList.add("renderedCardText"),""!==n.dueDate){const e=ln(function(n,e){var t;C(1,arguments);var r=y(null!==(t=null==e?void 0:e.additionalDigits)&&void 0!==t?t:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof n&&"[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);var o,a=function(n){var e,t={},r=n.split(fn.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?e=r[0]:(t.date=r[0],e=r[1],fn.timeZoneDelimiter.test(t.date)&&(t.date=n.split(fn.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var o=fn.timezone.exec(e);o?(t.time=e.replace(o[1],""),t.timezone=o[1]):t.time=e}return t}(n);if(a.date){var i=function(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=n.match(t);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:n.slice((r[1]||r[2]).length)}}(a.date,r);o=function(n,e){if(null===e)return new Date(NaN);var t=n.match(mn);if(!t)return new Date(NaN);var r=!!t[4],o=Cn(t[1]),a=Cn(t[2])-1,i=Cn(t[3]),d=Cn(t[4]),c=Cn(t[5])-1;if(r)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,d,c)?function(n,e,t){var r=new Date(0);r.setUTCFullYear(n,0,4);var o=7*(e-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(e,d,c):new Date(NaN);var s=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(xn[e]||(vn(n)?29:28))}(e,a,i)&&function(n,e){return e>=1&&e<=(vn(n)?366:365)}(e,o)?(s.setUTCFullYear(e,a,Math.max(o,i)),s):new Date(NaN)}(i.restDateString,i.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var d,c=o.getTime(),s=0;if(a.time&&(s=function(n){var e=n.match(hn);if(!e)return NaN;var t=bn(e[1]),r=bn(e[2]),o=bn(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,r,o)?t*pn+r*An+1e3*o:NaN}(a.time),isNaN(s)))return new Date(NaN);if(!a.timezone){var u=new Date(c+s),l=new Date(0);return l.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),l.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),l}return d=function(n){if("Z"===n)return 0;var e=n.match(gn);if(!e)return 0;var t="+"===e[1]?-1:1,r=parseInt(e[2]),o=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,o)?t*(r*pn+o*An):NaN}(a.timezone),isNaN(d)?new Date(NaN):new Date(c+s+d)}(n.dueDate),"dd MMM yy HH:mm");r.textContent=`${e}`}else r.textContent=`${n.dueDate}`;return e.appendChild(t),e.appendChild(r),e}(n),i=function(n){const e=document.createElement("div");e.id="renderedPriority";const t=document.createElement("p");t.classList.add("renderedCardHead"),t.textContent="Priority";const r=document.createElement("p");return r.classList.add("renderedCardText"),r.textContent=`${n.priority}`,e.appendChild(t),e.appendChild(r),e}(n);t.appendChild(r),t.appendChild(o),t.appendChild(a),t.appendChild(i),Yn.insertBefore(t,Yn.children[e]),function(n,e){"High"===e?n.style.backgroundColor="#fca5a5":"Medium"===e?n.style.backgroundColor="#fdba74":"Low"===e&&(n.style.backgroundColor="#fcd34d")}(t,n.priority);const d=document.createElement("div");d.id="cardIcons";const c=function(n,e){const t=document.createElement("img");return t.classList.add("cardimg"),t.src=wn,t.addEventListener("click",(()=>{console.log(n.uniqueID);const t=document.getElementById(n.uniqueID),r=Array.from(t.parentElement.children).indexOf(t);console.log(r),e.remove(),function(n,e){const t=kn();t.value=n.title;const r=Sn();r.value=n.description;const o=jn();o.value=n.dueDate;const a=Mn();a.value=n.priority;const i=function(n,e,t,r,o,a){const i=document.createElement("form");return i.id="cardForm",i.addEventListener("submit",(d=>{i.remove(),console.log(Ln),Ln.edit(n,e.value,t.value,r.value,o.value),Ln.showAllCards(),Pn(n,a),d.preventDefault()})),i}(n,t,r,o,a,e),d=document.createElement("div");d.classList.add("cardformbutton");const c=function(){const n=document.createElement("button");return n.classList.add("cardformbutton"),n.innerText="Change",n}();i.appendChild(t),i.appendChild(r),i.appendChild(o),i.appendChild(a),d.appendChild(c),i.appendChild(d),Yn.insertBefore(i,Yn.children[e])}(n,r)})),t}(n,t),s=function(n,e){const t=document.createElement("img");return t.classList.add("cardimg"),t.src=yn,t.addEventListener("click",(()=>{!function(n){Ln.remove(n),function(n){console.log(n);const e=JSON.parse(localStorage.getItem("storedCards")||"[]");for(let t=0;t<e.length;t++)for(let r=0;r<e[t].length;r++)e[t][r].uniqueID===n.uniqueID&&e[t].splice(r,1);localStorage.setItem("storedCards",JSON.stringify(e))}(n)}(n),Dn(Ln),e.remove()})),t}(n,t);d.appendChild(c),d.appendChild(s),t.appendChild(d),function(n){n.addEventListener("click",(()=>{n.className="toDocard"===n.className?"bigToDoCard":"toDocard"}))}(t)}class Un{constructor(n,e,t,r,o,a){this.title=n,this.description=e,this.dueDate=t,this.priority=r,this.uniqueID=o,this.projectID=a}static fromJSON(n){return Object.assign(new Un,JSON.parse(n))}}class Nn{constructor(n,e){this.toDoList=[],this.name=n,this.index=e}add(n){this.toDoList.push(n)}remove(n){this.toDoList=this.toDoList.filter((e=>e.uniqueID!==n.uniqueID))}empty(){this.toDoList=[]}edit(n,e,t,r,o){console.log(e);for(let a of this.toDoList)n.uniqueID===a.uniqueID&&(a.title=e,a.description=t,a.dueDate=r,a.priority=o)}getLength(){return this.toDoList.length}getAllCards(){return this.toDoList}showAllCards(){this.toDoList.forEach((n=>{console.log(n)}))}renderAllCards(){this.toDoList.forEach((n=>{Pn(n)}))}static fromJSON(n){return Object.assign(new Nn,n)}}const Wn=new class{constructor(n){this.projects=[]}add(n){this.projects.push(n)}remove(n){this.projects=this.projects.filter((e=>e.index!==n.index))}showAllProjects(){this.projects.forEach((n=>{console.log(n)}))}getAllProjects(){return this.projects}},zn=new Nn("Daily Project","id"+(new Date).getTime());let Ln=zn;Bn(zn),Tn(zn),document.querySelector("button.addProject").addEventListener("click",(()=>{const n=function(){const n=document.createElement("input");return n.id="projectinput",n.type="text",n.placeholder="Project name",n.required=!0,n}(),e=function(){const n=document.createElement("button");return n.classList.add("projectFormButtons"),n.innerText="Add",n}(),t=document.createElement("div");t.id="projectFormButtons";const r=function(n){const e=document.createElement("form");return e.id="projectForm",e.addEventListener("submit",(t=>{const r="id"+(new Date).getTime();Tn(new Nn(n.value,r)),function(){console.log(Wn);const n=Wn.getAllProjects();n.shift(),localStorage.setItem("storedProjects",JSON.stringify(n))}(),e.remove(),t.preventDefault()})),e}(n),o=function(n){const e=document.createElement("button");return e.classList.add("projectFormButtons"),e.innerText="Cancel",e.addEventListener("click",(e=>{e.preventDefault(),n.remove()})),e}(r);r.appendChild(n),t.appendChild(e),t.appendChild(o),r.appendChild(t),In.appendChild(r)})),function(){const n="id"+(new Date).getTime(),e=Ln.index,t=new Un("Welcome","This is a welcoming card! Just click the bin icon below to delete it!","2018-06-07T00:00","Low",n,e);Ln.add(t),Dn(Ln),Pn(t)}(),function(){console.log(Wn);const n=JSON.parse(localStorage.getItem("storedProjects")),e=JSON.parse(localStorage.getItem("storedCards")||"[]");for(let t of n){let n=Nn.fromJSON(t);n.showAllCards(),n.empty(),console.log(n.getAllCards());for(let t of e)for(let e of t)n.index===e.projectID&&(console.log("hello"),n.add(e));Tn(n)}console.log(Wn)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,